from flask import Flask, render_template, request, session, redirect, url_for, send_file, g
from flask_babel import Babel, _
from password_utils import check_password_strength_web
import io
import csv
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # For session usage

# Configure Babel for translations
app.config['BABEL_DEFAULT_LOCALE'] = 'en'
app.config['LANGUAGES'] = {
    'en': 'English',
    'fr': 'Français',
    'zh': '中文'
}

def get_locale():
    if 'language' in session:
        return session['language']
    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())

babel = Babel(app, locale_selector=get_locale)

@app.before_request
def before_request():
    lang = request.args.get('lang')
    if lang in app.config['LANGUAGES']:
        session['language'] = lang

@app.route('/', methods=['GET', 'POST'])
def index():
    result = None
    if request.method == 'POST':
        password = request.form.get('password', '')
        result = check_password_strength_web(password)
        # Store result in session for exporting
        session['last_result'] = {
            'requirements': result['requirements'],
            'entropy': result['entropy'],
            'entropy_level': result['entropy_level'],
            'pwned_count': result['pwned_count']
        }
    return render_template('index.html', result=result, LANGUAGES=app.config['LANGUAGES'], export_pdf=url_for('export_pdf'))

@app.route('/export_csv')
def export_csv():
    result = session.get('last_result')
    if not result:
        return redirect(url_for('index'))
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['Requirement', 'Met'])
    for req, met in result['requirements'].items():
        writer.writerow([req, 'Yes' if met else 'No'])
    writer.writerow([])
    writer.writerow(['Entropy', result['entropy']])
    writer.writerow(['Entropy Level', result['entropy_level']])
    writer.writerow(['Pwned Count', result['pwned_count'] if result['pwned_count'] is not None else 'Not checked'])
    output.seek(0)
    return send_file(
        io.BytesIO(output.getvalue().encode()),
        mimetype='text/csv',
        as_attachment=True,
        download_name='password_report.csv'
    )

@app.route('/export_pdf')
def export_pdf():
    result = session.get('last_result')
    if not result:
        return redirect(url_for('index'))
    buffer = io.BytesIO()
    p = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    y = height - 40
    p.setFont("Helvetica-Bold", 16)
    p.drawString(40, y, _(u"Password Strength Report"))
    y -= 30
    p.setFont("Helvetica", 12)
    p.drawString(40, y, _(u"Requirements:"))
    y -= 20
    for req, met in result['requirements'].items():
        status = _(u"OK") if met else _(u"Missing")
        p.drawString(60, y, f"- {_(req)}: {status}")
        y -= 18
    y -= 10
    p.drawString(40, y, _(u"Entropy:") + f" {result['entropy']:.1f}")
    y -= 18
    p.drawString(40, y, _(u"Entropy Level:") + f" {_(result['entropy_level'])}")
    y -= 18
    p.drawString(40, y, _(u"Pwned Count:") + f" {result['pwned_count'] if result['pwned_count'] is not None else _(u'Not checked')}")
    y -= 30
    p.setFont("Helvetica-Oblique", 10)
    p.drawString(40, y, _(u"Generated by Password Strength Checker"))
    p.save()
    buffer.seek(0)
    return send_file(
        buffer,
        mimetype='application/pdf',
        as_attachment=True,
        download_name='password_report.pdf'
    )

if __name__ == '__main__':
    app.run(debug=True)
